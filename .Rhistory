myRawTesting <- rbind(myTraining[2, -58] , myRawTesting)
myRawTesting <- myRawTesting[-1,]
for (i in 1:length(myRawTesting) )
{
for(j in 1:length(myTraining))
{
if(grep(names(myTraining[i]), names(myRawTesting[j])))
{
class(myRawTesting[j]) <- class(myTraining[i])
}
}
}
for (i in 1:length(myRawTesting) )
{
for(j in 1:length(myTraining))
{
if(grep(names(myTraining[i]), names(myRawTesting[j]))==1)
{
class(myRawTesting[j]) <- class(myTraining[i])
}
}
}
grep(names(myTraining[i]), names(myRawTesting[j])
)
i=1
j=1
myTraining[i]
myRawTesting[j]
grep(names(myTraining[i]), names(myRawTesting[j]))
grep(names(myTraining[i]), names(myRawTesting[j]))==1
for (i in 1:length(myRawTesting) )
{
for(j in 1:length(myTraining))
{
if(grep(names(myTraining[i]), names(myRawTesting[j]))==1)
{
class(myRawTesting[j]) <- class(myTraining[i])
}
}
}
class(myRawTesting[j])
class(myTraining[i])
for (i in 1:length(myRawTesting) )
{
for(j in 1:length(myTraining))
{
if(grep(names(myTraining[i]), names(myRawTesting[j]))==1)
{
print "yes"
}
}
}
for (i in 1:length(myRawTesting) )
{
for(j in 1:length(myTraining))
{
if(grep(names(myTraining[i]), names(myRawTesting[j]))==1)
{
i
}
}
}
for (i in 1:length(myRawTesting) )
{
for(j in 1:length(myTraining))
{
if(grep(names(myRawTesting[i]), names(myTraining[j]))==1)
{
class(myRawTesting[j]) <- class(myTraining[i])
}
}
}
for (i in 1:length(myRawTesting) )
{
for(j in 1:length(myTraining))
{
if(grep(names(myRawTesting[i]), names(myTraining[j]))==1)
{
class(myRawTesting[j]) <- class(myTraining[i])
}
}
}
for (i in 1:length(myRawTesting) )
{
for(j in 1:length(myTraining))
{
if(grep(names(myRawTesting[i]), names(myTraining[j]))==1)
{
class(myRawTesting[i]) <- class(myTraining[j])
}
}
}
for (i in 1:length(myRawTesting) )
{
for(j in 1:length(myTraining))
{
if(grep(names(myRawTesting[i]), names(myTraining[j]))==1)
{
class(myRawTesting[i]) <- class(myTraining[j])
}
}
}
for (i in 1:length(myRawTesting) )
{
for(j in 1:length(myTraining))
{
if(grep(names(myRawTesting[i]), names(myTraining[j]))==1)
{
class(myRawTesting[i]) <- class(myTraining[j])
}
}
}
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
set.seed(7742)
setwd('C:/Users/m20mm/Desktop/coursera/08. Practical Machine Learning/')
myRawTraining <- read.csv("pml-training.csv", header = TRUE)
myRawTesting <- read.csv("pml-testing.csv", header = TRUE)
NearZeroVariables <- nearZeroVar(myRawTraining, saveMetrics=TRUE)
```
myTrainingTemp <- myRawTraining[,NearZeroVariables$nzv==FALSE]
mySplitTraining = createDataPartition(myTrainingTemp$classe, p = 0.6, list=FALSE)
myTraining = myTrainingTemp[mySplitTraining,]
myCrossValidation = myTrainingTemp[-mySplitTraining,]
myTree <- rpart(classe ~ ., data=myTraining, method="class")
myTestPrediction <- predict(myTree, myCrossValidation, type = "class")
confusionMatrix(myTestPrediction, myCrossValidation$classe)
NearZeroVariables <- nearZeroVar(myRawTraining, saveMetrics=TRUE)
myTrainingTemp <- myRawTraining[,NearZeroVariables$nzv==FALSE]
```
mySplitTraining = createDataPartition(myTrainingTemp$classe, p = 0.6, list=FALSE)
myTraining = myTrainingTemp[mySplitTraining,]
myCrossValidation = myTrainingTemp[-mySplitTraining,]
myTree <- rpart(classe ~ ., data=myTraining, method="class")
myTestPrediction <- predict(myTree, myCrossValidation, type = "class")
confusionMatrix(myTestPrediction, myCrossValidation$classe)
for (i in 1:length(myRawTesting) )
{
for(j in 1:length(myTraining))
{
if(grep(names(myRawTesting[i]), names(myTraining[j]))==1)
{
class(myRawTesting[i]) <- class(myTraining[j])
}
}
}
myRawTesting
myTraining
for (i in 1:length(myRawTesting) )
{
for(j in 1:length(myTraining))
{
if( length( grep(names(myTraining[i]), names(myRawTesting)[j]) ) ==1)  {
class(myRawTesting[j]) <- class(myTraining[i])
}
}
}
for (i in 1:length(myRawTesting) )
{
names(myRawTesting[i])
}
for (i in 1:length(myRawTesting) )
{
print names(myRawTesting[i])
}
for (i in 1:length(myRawTesting) )
{
print (names(myRawTesting[i]))
}
for (i in 1:length(myRawTesting))
{
for(j in 1:length(myTraining))
{
if(names(myRawTesting[i]) ==  names(myTraining[j]))
{
class(myRawTesting[i]) <- class(myTraining[j])
}
}
}
myResult <- predict(myTree, myRawTesting)
myResult
myRawTesting <- rbind(myTraining[2, -58] , myRawTesting)
myRawTesting <- rbind(myTraining[2, -58] , myRawTesting)
myRawTesting <- rbind(myTraining[2, -58] , myRawTesting)
myResult <- predict(myTree, myRawTesting)
for (i in 1:length(myRawTesting))
{
for(j in 1:length(myTraining))
{
if(names(myRawTesting[i]) ==  names(myTraining[j]))
{
print("yes")
class(myRawTesting[i]) <- class(myTraining[j])
}
}
}
for (i in 1:length(myRawTesting))
{
for(j in 1:length(myTraining))
{
if(names(myRawTesting[i]) ==  names(myTraining[j]))
{
print(i)
class(myRawTesting[i]) <- class(myTraining[j])
}
}
}
dim(myRawTesting)
dim(myTraining)
```{r, echo=TRUE}
for (i in 1:length(myRawTesting))
{
for(j in 1:length(myTraining))
{
if(names(myRawTesting[i]) ==  names(myTraining[j]))
{
class(myRawTesting[i]) <- class(myTraining[j])
myTesting <- cbind(myRawTesting[i], myTesting)
}
}
}
for (i in 1:length(myRawTesting))
{
for(j in 1:length(myTraining))
{
if(names(myRawTesting[i]) ==  names(myTraining[j]))
{
class(myRawTesting[i]) <- class(myTraining[j])
myTesting <- cbind(myRawTesting[i], myTesting)
}
}
}
myTesting = matrix()
for (i in 1:length(myRawTesting))
{
for(j in 1:length(myTraining))
{
if(names(myRawTesting[i]) ==  names(myTraining[j]))
{
class(myRawTesting[i]) <- class(myTraining[j])
myTesting <- cbind(myRawTesting[i], myTesting)
}
}
}
dim(myTesting)
myResult <- predict(myTree, myTesting)
myResult
myResult <- predict(myTree, newdata = myTesting)
myTesting <- info[-myTraining, ]
names(myTraining)
class(myTraining)
myTesting = matrix()
myTesting
i
myRawTesting[i]
myTesting <- cbind(myRawTesting[i], myTesting)
myTesting
myTesting <- cbind(myRawTesting[i], myTesting)
myTesting
myTesting = matrix()
for (i in 1:length(myRawTesting))
{
for(j in 1:length(myTraining))
{
if(names(myRawTesting[i]) ==  names(myTraining[j]))
{
class(myRawTesting[i]) <- class(myTraining[j])
myTesting <- cbind(myRawTesting[i], myTesting)
}
}
}
myTesting
dim(myTesting)
dim(myTraining)
names(myTraining)
dim(myTesting)
names(myTesting)
myTesting = matrix()
for (i in 1:length(myTraining))
{
for(j in 1:length(myRawTesting))
{
if(names(myTraining[i]) ==  names(myRawTesting[j]))
{
class(myRawTesting[j]) <- class(myTraining[i])
myTesting <- cbind(myRawTesting[j], myTesting)
}
}
}
names(myTesting)
myTesting = matrix()
for (i in 1:length(myTraining))
{
for(j in 1:length(myRawTesting))
{
if(names(myTraining[i]) ==  names(myRawTesting[j]))
{
class(myRawTesting[j]) <- class(myTraining[i])
myTesting <- cbind(myTesting, myRawTesting[j])
}
}
}
names(myTesting)
myResult <- predict(myTree, newdata = myTesting)
myTesting$myTesting <- NULL
names(myTesting)
myResult <- predict(myTree, newdata = myTesting)
class(myTesting[1])
class(myTesting[2])
class(myTesting[3])
class(myTesting[5])
myTesting
class(myTraining[5])
class(myTraining[2])
myTraining
myTesting = matrix()
for (i in 1:length(myTraining))
{
for(j in 1:length(myRawTesting))
{
if(names(myTraining[i]) ==  names(myRawTesting[j]))
{
class(myRawTesting[j]) <- class(myTraining[i])
myTesting <- cbind(myTesting, myRawTesting[j])
}
}
}
myTesting$myTesting <- NULL
myResult <- predict(myTree, newdata = myTesting, , type = "class")
myTesting
names(myTesting)
myResult <- predict(myTree, newdata = myTesting , type = "class")
class(myTraining)
class(myTesting)
predict(myTree, newdata = myTesting , type = "class")
predict(myTree, newdata = myTraining , type = "class")
predict(myTree, newdata = myTesting , type = "class")
myTesting = myTraining[0,]
myTesting = myTraining[0,]
for (i in 1:length(myTraining))
{
for(j in 1:length(myRawTesting))
{
if(names(myTraining[i]) ==  names(myRawTesting[j]))
{
class(myRawTesting[j]) <- class(myTraining[i])
myTesting <- cbind(myTesting, myRawTesting[j])
}
}
}
myTraining[0,]
myRawTesting
names(myRawTesting)
NearZeroVariables
myTesting <- myRawTesting[,NearZeroVariables$nzv==FALSE]
myResult <- predict(myTree, newdata = myTesting , type = "class")
myTesting
names(myTesting)
myTesting$problem_id <- NULL
myResult <- predict(myTree, newdata = myTesting , type = "class")
myTesting <- myRawTesting[,NearZeroVariables$nzv==FALSE]
myTesting$problem_id <- NULL
myTraining[0,]
myTraining[0,1:20]
myTraining[1:20,]
myTesting = myTraining[1:20,]
myResult <- predict(myTree, newdata = myTesting , type = "class")
myResult
myTesting = myTraining[0,]
myRawTesting[i,]
myTesting = myTraining[0,]
for (i in 1:length(myRawTesting))
{
myTesting[i, ] <- myRawTesting[i,]
}
myTesting
myTesting = myTraining[0,]
myTesting
myTraining[0,1]
myTraining[0,2]
myTraining[0,1:2]
myTraining[0,1:100]
myTesting = myTraining[0,1:99]
myTraining[0,1:99]
myTesting = myTraining[0,1:99]
myTestingTemp <- myRawTesting[,NearZeroVariables$nzv==FALSE]
for (i in 1:length(myTestingTemp))
{
myTesting[i, ] <- myTestingTemp[i,1:99]
}
myTesting
myResult <- predict(myTree, newdata = myTesting , type = "class")
myResult
myTesting
dim(myRawTesting)
dim(myTestingTemp)
dim(myTesting)
length(myTestingTemp)
myTesting = myTraining[0,1:99]
myTestingTemp <- myRawTesting[,NearZeroVariables$nzv==FALSE]
for (i in 1:20)
{
myTesting[i, ] <- myTestingTemp[i,1:99]
}
dim(myTesting)
myResult <- predict(myTree, newdata = myTesting , type = "class")
myResult
names(myTraining)
names(myRawTesting)
names(myTraining)
names(myTesting)
myRawTesting
myTesting
myResult
head(myRawTesting,1)
head(myTesting,1)
head(myRawTesting,-1)
head(myRawTesting,19:19)
head(myRawTesting,18:19)
head(myRawTesting,20)
head(myTesting,20)
myResult <- predict(myTree, newdata = myTesting)
myResult
myResult <- predict(myTree, myTesting)
myResult
myTesting = myTraining[0,1:99]
myTestingTemp <- myRawTesting[,NearZeroVariables$nzv==FALSE]
for (i in 1:20)
{
myTesting[i, ] <- myTestingTemp[i,]
}
myResult <- predict(myTree, myTraining[4])
myResult
myTraining
myTraining[4]
myResult <- predict(myTree, myTraining[4,])
myResult
myResult <- predict(myTree, myTraining[500,])
myResult
myResult <- predict(myTree, myTraining)
myResult
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
set.seed(7742)
setwd('C:/Users/m20mm/Desktop/coursera/08. Practical Machine Learning/')
myRawTraining <- read.csv("pml-training.csv", header = TRUE)
myRawTesting <- read.csv("pml-testing.csv", header = TRUE)
NearZeroVariables <- nearZeroVar(myRawTraining, saveMetrics=TRUE)
myTrainingTemp <- myRawTraining[,NearZeroVariables$nzv==FALSE]
mySplitTraining = createDataPartition(myTrainingTemp$classe, p = 0.6, list=FALSE)
myTraining = myTrainingTemp[mySplitTraining,]
myCrossValidation = myTrainingTemp[-mySplitTraining,]
myTree <- rpart(classe ~ ., data=myTraining, method="class")
myTestPrediction <- predict(myTree, myCrossValidation, type = "class")
confusionMatrix(myTestPrediction, myCrossValidation$classe)
myResult <- predict(myTree, myTraining)
myResult
myResult <- predict(myTree, myCrossValidation)
myResult
myResult <- predict(myTree, myCrossValidation, type = "class")
myResult
myTrainingTemp
names(myTrainingTemp)
head(myTrainingTemp)
myTrainingTemp$X <- NULL
mySplitTraining = createDataPartition(myTrainingTemp$classe, p = 0.6, list=FALSE)
myTraining = myTrainingTemp[mySplitTraining,]
myCrossValidation = myTrainingTemp[-mySplitTraining,]
myTree <- rpart(classe ~ ., data=myTraining, method="class")
myTestPrediction <- predict(myTree, myCrossValidation, type = "class")
confusionMatrix(myTestPrediction, myCrossValidation$classe)
myTesting = myTraining[0,1:99]
myTestingTemp <- myRawTesting[,NearZeroVariables$nzv==FALSE]
for (i in 1:20)
{
myTesting[i, ] <- myTestingTemp[i,1:99]
}
myTesting = myTraining[0,1:99]
myTestingTemp <- myRawTesting[,NearZeroVariables$nzv==FALSE]
myTestingTemp
names(myTestingTemp)
myTestingTemp$X <- NULL
dim(myTraining)
myTesting = myTraining[0,1:98]
myTestingTemp <- myRawTesting[,NearZeroVariables$nzv==FALSE]
myTestingTemp$X <- NULL
for (i in 1:20)
{
myTesting[i, ] <- myTestingTemp[i,1:98]
}
myResult <- predict(myTree, myCrossValidation)
myResult
myResult <- predict(myTree, myTesting)
myResult
myResult <- predict(myTree, myTesting, method="class")
myResult
myResult <- predict(myTree, myTesting, type="class")
myResult
confusionMatrix(myTestPrediction, myCrossValidation$classe)
myResult
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(myResult)
